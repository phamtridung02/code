#include <stdio.h>
#include <string.h>

void compute_prefix_function(char* pattern, int m, int* pi) {
    int k = 0;
    for (int q = 1; q < m; q++) {
        while (k > 0 && pattern[k] != pattern[q]) {
            k = pi[k - 1];
        }
        if (pattern[k] == pattern[q]) {
            k++;
        }
        pi[q] = k;
    }
}

int count_occurrences(char* pattern, char* text) {
    int m = strlen(pattern);
    int n = strlen(text);
    int pi[m];
    compute_prefix_function(pattern, m, pi);
    int q = 0;
    int count = 0;
    for (int i = 0; i < n; i++) {
        while (q > 0 && pattern[q] != text[i]) {
            q = pi[q - 1];
        }
        if (pattern[q] == text[i]) {
            q++;
        }
        if (q == m) {
            count++;
            q = pi[q - 1];
        }
    }
    return count;
}

int main() {
    char pattern[100001], text[100001];
    fgets(pattern, sizeof(pattern), stdin);
    fgets(text, sizeof(text), stdin);
    
   
    pattern[strcspn(pattern, "\n")] = '\0';
    text[strcspn(text, "\n")] = '\0';
    
    int occurrences = count_occurrences(pattern, text);
    printf("%d\n", occurrences);

    return 0;
}


#include <stdio.h>
#include <string.h>
#include <ctype.h>  

int get_count(char s[], char comments[][106], int n) {
    int count = 0;

    for (int i = 0; i < n; i++) {
        char lowerComment[106];  
        char lowerPhrase[51];    

      
        for (int j = 0; comments[i][j] != '\0'; j++) {
            lowerComment[j] = tolower(comments[i][j]);
        }
        lowerComment[strlen(comments[i])] = '\0';
        for (int j = 0; s[j] != '\0'; j++) {
            lowerPhrase[j] = tolower(s[j]);
        }
        lowerPhrase[strlen(s)] = '\0';

    
        const char *found = strstr(lowerComment, lowerPhrase);
        if (found != NULL) {
            count++;
        }
    }

    return count;
}

int main() {
    char s[51];
    int n;

  
    scanf("%s %d", s, &n);

    char comments[n][106];  

    
    for (int i = 0; i < n; i++) {
        scanf("%s", comments[i]);
    }

    int derogatory_count = get_count(s, comments, n);
    printf("%d\n", derogatory_count);

    return 0;
}
