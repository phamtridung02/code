#include <stdio.h>
#include <stdlib.h>


typedef struct {
    int start;
    int end;
} Request;


int compare(const void *a, const void *b) {
    return ((Request *)a)->end - ((Request *)b)->end;
}


int maxCompatibleRequests(Request requests[], int n) {
   
    qsort(requests, n, sizeof(Request), compare);
    
    int count = 1;
    int lastEnd = requests[0].end;
    
   
    for (int i = 1; i < n; i++) {
        
        if (requests[i].start >= lastEnd) {
            count++;
            lastEnd = requests[i].end;
        }
    }
    
    return count;
}

int main() {
    int n;
 
    scanf("%d", &n);
    
    
    int start[n];
    for (int i = 0; i < n; i++) {
        scanf("%d", &start[i]);
    }
    
   
    int end[n];
    for (int i = 0; i < n; i++) {
        scanf("%d", &end[i]);
    }
    
    
    Request requests[n];
    for (int i = 0; i < n; i++) {
        requests[i].start = start[i];
        requests[i].end = end[i];
    }
    
   
    printf("%d\n", maxCompatibleRequests(requests, n));
    
    return 0;
}







#include <stdio.h>
#include <stdlib.h>
#include <limits.h>


long long minBoundaryArea(int N, int cities[][2]) {
    
    int minX = INT_MAX, minY = INT_MAX, maxX = INT_MIN, maxY = INT_MIN;
    
    
    for (int i = 0; i < N; i++) {
        if (cities[i][0] < minX) minX = cities[i][0];
        if (cities[i][0] > maxX) maxX = cities[i][0];
        if (cities[i][1] < minY) minY = cities[i][1];
        if (cities[i][1] > maxY) maxY = cities[i][1];
    }
    
    
    int horizontalDist = maxX - minX;
    int verticalDist = maxY - minY;
    
    
    int sideLength = horizontalDist > verticalDist ? horizontalDist : verticalDist;
    
    
    long long minArea = (long long)sideLength * sideLength;
    
    return minArea;
}

int main() {
    int T;
    
    scanf("%d", &T);
    
    
    for (int t = 0; t < T; t++) {
        int N;
        
        scanf("%d", &N);
        
        
        int cities[N][2];
        
        
        for (int i = 0; i < N; i++) {
            scanf("%d %d", &cities[i][0], &cities[i][1]);
        }
        
        
        printf("%lld\n", minBoundaryArea(N, cities));
    }
    
    return 0;
}
